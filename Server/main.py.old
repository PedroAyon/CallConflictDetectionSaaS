import asyncio
import ntpath
import os
import queue
import sqlite3
import threading
import uuid
from datetime import datetime, timedelta, timezone
from functools import wraps

import jwt
from dotenv import load_dotenv
from flask import Flask, request, jsonify, send_from_directory, g
from flask_cors import CORS
from werkzeug.utils import secure_filename

from tools.conflict_detection import ConflictDetector
from db.database import Database
from tools.audio_utils import convert_m4a_to_wav
from tools.speech_to_text import SpeechToTextService

load_dotenv()

DATABASE_PATH = os.getenv("DATABASE_PATH", "database.sqlite")
SCHEMA_PATH = os.getenv("SCHEMA_PATH", "schema.sql")
RECORDINGS_DIR = os.getenv("RECORDINGS_DIR", "recordings")
AZURE_SPEECH_API_KEY = os.getenv("AZURE_SPEECH_API_KEY")
AZURE_SERVICE_REGION = os.getenv("AZURE_SERVICE_REGION")
SPEECH_LANG = os.getenv("SPEECH_LANG", "en-US")
ALLOWED_AUDIO_EXTENSIONS = {'wav', 'mp3', 'm4a', 'ogg', 'flac', 'aac', 'mp4'}

app = Flask(__name__)
CORS(app)  # Enable CORS on all routes

app.config['MAX_CONTENT_LENGTH'] = 64 * 1024 * 1024

app.config['JWT_SECRET_KEY'] = os.getenv("JWT_SECRET_KEY", "your-super-secret-and-long-key-please-change")
app.config['JWT_ALGORITHM'] = "HS256"
app.config['JWT_EXPIRATION_DAYS'] = 30

os.makedirs(RECORDINGS_DIR, exist_ok=True)

db_service = Database(db_path=DATABASE_PATH, schema_path=SCHEMA_PATH)

if AZURE_SPEECH_API_KEY and AZURE_SERVICE_REGION:
    speech_recognition_service = SpeechToTextService(
        AZURE_SPEECH_API_KEY, AZURE_SERVICE_REGION, SPEECH_LANG
    )
else:
    speech_recognition_service = None
    print("Warning: Azure Speech API Key or Region not configured. Speech-to-text functionality will be disabled.")

conflict_analysis_service = ConflictDetector()

# --- Background queue and worker thread ---
audio_queue = queue.Queue()

def audio_worker():
    """Continuously process queued audio files for transcription and conflict detection."""
    while True:
        audio_path = audio_queue.get()
        try:
            # Transcribe
            if speech_recognition_service:
                raw_text, error_code = speech_recognition_service.speech_to_text_from_file_once(audio_path)
                transcription_text = raw_text or ""
            else:
                transcription_text = None

            # Conflict detection
            conflict_value = None
            if transcription_text is not None:
                conflict_value = conflict_analysis_service.detect_conflict(transcription_text)

            # Update database record
            db_service.update_call_analysis(audio_path, transcription_text, conflict_value)

        except Exception as e:
            app.logger.error(f"Error processing audio {audio_path}: {e}")
        finally:
            audio_queue.task_done()

threading.Thread(target=audio_worker, daemon=True).start()

def is_allowed_audio_file(filename):
    return '.' in filename and \
        filename.rsplit('.', 1)[1].lower() in ALLOWED_AUDIO_EXTENSIONS


async def run_blocking_io(func, *args, **kwargs):
    return await asyncio.to_thread(func, *args, **kwargs)


@app.errorhandler(sqlite3.IntegrityError)
def handle_db_integrity_error(error):
    app.logger.error(f"Database integrity error: {error}")
    return jsonify({"error": "Database integrity constraint violated.", "details": str(error)}), 409


@app.errorhandler(ValueError)
def handle_value_error(error):
    app.logger.error(f"Value error: {error}")
    return jsonify({"error": "Invalid value provided.", "details": str(error)}), 400


@app.errorhandler(FileNotFoundError)
def handle_file_not_found_error(error):
    app.logger.error(f"File not found error: {error}")
    return jsonify({"error": "File not found.", "details": str(error)}), 404


@app.errorhandler(Exception)
def handle_generic_exception(error):
    app.logger.error(f"An unexpected error occurred: {error}", exc_info=True)
    return jsonify({"error": "An unexpected server error occurred.", "details": str(error)}), 500


def token_required(f):
    @wraps(f)
    async def decorated_function(*args, **kwargs):
        token = None
        auth_header = request.headers.get('Authorization')
        if auth_header and auth_header.startswith('Bearer '):
            try:
                token = auth_header.split(" ")[1]
            except IndexError:
                return jsonify({"error": "Bearer token malformed"}), 401

        if not token and request.path == '/validate_auth_token':
            token = request.args.get('token')

        if not token:
            return jsonify({"error": "Token is missing"}), 401

        try:
            payload = jwt.decode(token, app.config['JWT_SECRET_KEY'], algorithms=[app.config['JWT_ALGORITHM']])
            g.current_user = payload

            # Fetch the user's last update timestamp from the database
            username = payload.get('sub')
            if username:
                user_last_updated = await run_blocking_io(db_service.get_user_last_updated, username)
                if user_last_updated and payload.get('iat'):
                    token_issued_at = datetime.fromtimestamp(payload['iat'], timezone.utc)
                    if user_last_updated > token_issued_at:
                        return jsonify({"error": "Token is outdated. Please log in again."}), 401

        except jwt.ExpiredSignatureError:
            return jsonify({"error": "Token has expired"}), 401
        except jwt.InvalidTokenError:
            return jsonify({"error": "Token is invalid"}), 401
        except Exception as e:
            app.logger.error(f"Token validation error: {e}")
            return jsonify({"error": f"Token processing error {e}"}), 401

        return await f(*args, **kwargs)

    return decorated_function


def admin_only(f):
    @wraps(f)
    async def decorated_function(*args, **kwargs):
        if not hasattr(g, 'current_user') or g.current_user.get('user_type') != 'admin':
            return jsonify({"error": "Admin access required"}), 403
        return await f(*args, **kwargs)

    return decorated_function


def employee_only(f):
    @wraps(f)
    async def decorated_function(*args, **kwargs):
        if not hasattr(g, 'current_user') or g.current_user.get('user_type') != 'employee':
            return jsonify({"error": "Employee access required"}), 403
        return await f(*args, **kwargs)

    return decorated_function


def check_admin_self(f):
    @wraps(f)
    @token_required
    @admin_only
    async def decorated_function(admin_username: str, *args, **kwargs):
        if g.current_user.get('sub') != admin_username:
            return jsonify({"error": "Access denied: You can only access your own company details."}), 403
        return await f(admin_username, *args, **kwargs)

    return decorated_function


def check_company_admin(company_id_arg_name='company_id'):
    def decorator(f):
        @wraps(f)
        @token_required
        @admin_only
        async def decorated_function(*args, **kwargs):
            company_id_from_path_str = str(kwargs.get(company_id_arg_name))
            token_company_id_str = str(g.current_user.get('company_id'))
            if company_id_from_path_str != token_company_id_str:
                return jsonify(
                    {"error": f"Access denied: Admin not authorized for company ID {company_id_from_path_str}."}), 403
            return await f(*args, **kwargs)

        return decorated_function

    return decorator


def check_admin_of_employee_company(employee_id_arg_name='employee_id'):
    def decorator(f):
        @wraps(f)
        @token_required
        @admin_only
        async def decorated_function(*args, **kwargs):
            employee_id_from_path = kwargs.get(employee_id_arg_name)
            if employee_id_from_path is None:
                return jsonify({"error": "Employee ID missing in path"}), 400
            employee_company_id = await run_blocking_io(db_service.get_company_id_by_employee_id,
                                                        employee_id=int(employee_id_from_path))
            if employee_company_id is None:
                return jsonify({"error": f"Employee with ID {employee_id_from_path} not found."}), 404
            if str(g.current_user.get('company_id')) != str(employee_company_id):
                return jsonify({
                    "error": f"Access denied: Admin not authorized for the company of employee ID {employee_id_from_path}."}), 403
            return await f(*args, **kwargs)

        return decorated_function

    return decorator


def check_self_employee(employee_id_arg_name='employee_id'):
    def decorator(f):
        @wraps(f)
        @token_required
        @employee_only
        async def decorated_function(*args, **kwargs):
            employee_id_from_path = kwargs.get(employee_id_arg_name)
            if str(g.current_user.get('employee_id')) != str(employee_id_from_path):
                return jsonify({"error": "Access denied: You can only add records for yourself."}), 403
            return await f(*args, **kwargs)

        return decorated_function

    return decorator


@app.route('/login', methods=['POST'])
async def login():
    data = request.get_json()
    if not data or 'username' not in data or 'password' not in data:
        return jsonify({"error": "Missing username or password"}), 400

    username = data['username']
    password_attempt = data['password']

    user_details = await run_blocking_io(
        db_service.get_user_details_for_login,  # This method now handles password verification
        username=username,
        password_attempt=password_attempt
    )

    if not user_details:
        # This means user not found, password incorrect, or user is not an admin/employee
        return jsonify({"error": "Invalid username or password, or user role not permitted for login."}), 401

    payload = {
        'sub': user_details['username'],
        'user_type': user_details['user_type'],
        'iat': datetime.now(timezone.utc),
        'exp': datetime.now(timezone.utc) + timedelta(days=app.config['JWT_EXPIRATION_DAYS'])
    }
    if user_details['user_type'] == 'admin':
        payload['company_id'] = user_details['company_id']
    elif user_details['user_type'] == 'employee':
        payload['company_id'] = user_details['company_id']
        payload['employee_id'] = user_details['employee_id']

    token = jwt.encode(payload, app.config['JWT_SECRET_KEY'], algorithm=app.config['JWT_ALGORITHM'])
    return jsonify({"token": token}), 200


@app.route('/validate_auth_token', methods=['GET', 'POST'])
@token_required
async def validate_auth_token():
    return jsonify({"message": "Token is valid", "user_payload": g.current_user}), 200


@app.route('/users', methods=['POST'])
async def api_add_user():
    data = request.get_json()
    if not data or 'username' not in data or 'password' not in data:
        return jsonify({"error": "Missing username or password"}), 400
    username = data['username']
    password = data['password']
    # Password will be hashed by db_service.add_user
    await run_blocking_io(db_service.add_user, username, password)
    return jsonify({"message": f"User {username} processed."}), 201


@app.route('/users/<username>', methods=['GET'])
async def api_get_user(username: str):
    # db_service.get_user is modified to not return password info
    user_info = await run_blocking_io(db_service.get_user, username)
    if user_info:  # user_info will be like {'username': 'some_user'}
        return jsonify(user_info), 200
    return jsonify({"error": "User not found"}), 404


@app.route('/companies', methods=['POST'])
async def api_add_company():
    data = request.get_json()
    required_fields = ['company_name', 'subscription_expiration', 'admin_username', 'admin_password']
    if not data or not all(field in data for field in required_fields):
        return jsonify({"error": "Missing required fields for company creation"}), 400
    try:
        datetime.strptime(data['subscription_expiration'], '%Y-%m-%d')
    except ValueError:
        return jsonify({"error": "Invalid date format for subscription_expiration. Use YYYY-MM-DD."}), 400

    # Passwords will be hashed by db_service.add_company
    await run_blocking_io(
        db_service.add_company,
        data['company_name'],
        data['subscription_expiration'],
        data['admin_username'],
        data['admin_password']
    )
    created_company = await run_blocking_io(db_service.get_company_by_admin, admin_username=data['admin_username'])
    if created_company:
        return jsonify({"message": "Company registered successfully", "company": created_company}), 201
    else:
        return jsonify({"error": "Company created but could not be retrieved immediately."}), 207


# MODIFIED ENDPOINT:
@app.route('/companies/admin/me', methods=['GET'])
@token_required
@admin_only
async def api_get_my_company_details():
    admin_username_from_token = g.current_user.get('sub')

    if not admin_username_from_token: # Should be caught by token_required logic if 'sub' is missing
        app.logger.error("Admin username ('sub') not found in token despite decorators.")
        return jsonify({"error": "Critical: Admin username not found in token payload."}), 500

    company = await run_blocking_io(db_service.get_company_by_admin, admin_username=admin_username_from_token)
    if company:
        return jsonify(company), 200
    return jsonify({"error": "Company not found for this admin."}), 404


@app.route('/companies/<int:company_id>/employees', methods=['POST'])
@check_company_admin(company_id_arg_name='company_id')
async def api_add_employee(company_id: int):
    data = request.get_json()
    required_fields = ['username', 'password', 'first_name', 'last_name']
    if not data or not all(field in data for field in required_fields):
        return jsonify({"error": "Missing required fields for employee creation"}), 400
    gender = data.get('gender')
    birthdate = data.get('birthdate')
    if gender and gender not in ('M', 'F'):
        return jsonify({"error": "Invalid gender. Must be 'M' or 'F'."}), 400
    if birthdate:
        try:
            datetime.strptime(birthdate, '%Y-%m-%d')
        except ValueError:
            return jsonify({"error": "Invalid date format for birthdate. Use YYYY-MM-DD."}), 400

    # Password will be hashed by db_service.add_employee
    await run_blocking_io(
        db_service.add_employee,
        company_id, data['username'], data['password'], data['first_name'],
        data['last_name'], gender, birthdate
    )
    return jsonify({"message": "Employee added successfully"}), 201


@app.route('/companies/<int:company_id>/employees', methods=['GET'])
@check_company_admin(company_id_arg_name='company_id')
async def api_get_employees_by_company(company_id: int):
    employees = await run_blocking_io(db_service.get_employees_by_company, company_id=company_id)
    return jsonify(employees), 200


# In your Flask app:

@app.route('/employees/<int:employee_id>', methods=['PUT'])
@check_admin_of_employee_company(employee_id_arg_name='employee_id')
async def api_update_employee(employee_id: int):
    data = request.get_json()

    required_fields = ['username', 'first_name', 'last_name']
    if not data or not all(field in data for field in required_fields):
        return jsonify({"error": "Missing required fields for employee update"}), 400

    username   = data['username']
    new_password = data.get('password')       # ← optional
    first_name = data['first_name']
    last_name  = data['last_name']
    gender     = data.get('gender')
    birthdate  = data.get('birthdate')

    if gender and gender not in ('M', 'F'):
        return jsonify({"error": "Invalid gender. Must be 'M' or 'F'."}), 400

    if birthdate:
        try:
            datetime.strptime(birthdate, '%Y-%m-%d')
        except ValueError:
            return jsonify({"error": "Invalid date format for birthdate. Use YYYY-MM-DD."}), 400

    try:
        await run_blocking_io(
            db_service.update_employee,
            employee_id,
            username,
            new_password,    # can be None
            first_name,
            last_name,
            gender,
            birthdate
        )
        return jsonify({"message": f"Employee {employee_id} updated successfully"}), 200

    except ValueError as e:
        # Employee not found, etc.
        return jsonify({"error": str(e)}), 404



@app.route('/employees/<int:employee_id>', methods=['DELETE'])
@check_admin_of_employee_company(employee_id_arg_name='employee_id')
async def api_delete_employee(employee_id: int):
    try:
        await run_blocking_io(db_service.delete_employee, employee_id=employee_id)
        return jsonify({"message": f"Employee {employee_id} deleted successfully"}), 200
    except ValueError as e:
        return jsonify({"error": str(e)}), 404


@app.route('/call_records', methods=['POST'])
@token_required
@employee_only
async def api_add_call_record():
    """
    Adds a call record for the currently authenticated employee.
    Expects:
      - multipart form-data with 'audio_file'
      - form field 'call_timestamp' in ISO 8601 format
    """
    # 1) Determine employee ID from the JWT payload
    employee_id = g.current_user.get('employee_id')
    if not employee_id:
        return jsonify({"error": "Could not determine employee identity"}), 401

    # 2) Validate file upload
    if 'audio_file' not in request.files:
        return jsonify({"error": "No audio file part in the request"}), 400
    audio_file = request.files['audio_file']
    if audio_file.filename == '':
        return jsonify({"error": "No selected audio file"}), 400
    if not is_allowed_audio_file(audio_file.filename):
        return jsonify({"error": "Invalid audio file type"}), 400

    # 3) Validate call timestamp
    call_timestamp_str = request.form.get('call_timestamp')
    if not call_timestamp_str:
        return jsonify({"error": "Missing call_timestamp"}), 400
    try:
        # Allow "Z" or offset
        call_timestamp = datetime.fromisoformat(call_timestamp_str.replace("Z", "+00:00"))
    except ValueError:
        return jsonify({"error": "Invalid call_timestamp format. Use ISO 8601."}), 400

    # 4) Save uploaded file
    original_filename = secure_filename(audio_file.filename)
    file_ext = original_filename.rsplit('.', 1)[1].lower()
    unique_id = uuid.uuid4().hex
    base_name = f"{unique_id}_{original_filename.rsplit('.', 1)[0]}"
    saved_path = os.path.join(RECORDINGS_DIR, f"{base_name}.{file_ext}")
    await run_blocking_io(audio_file.save, saved_path)

    # 5) If M4A, convert to WAV
    path_for_transcription = saved_path
    final_audio_path = saved_path
    if file_ext == 'm4a':
        wav_path = os.path.join(RECORDINGS_DIR, f"{base_name}.wav")
        try:
            converted = await run_blocking_io(convert_m4a_to_wav, saved_path, wav_path)
            path_for_transcription = converted
            final_audio_path = converted
        except Exception as e:
            app.logger.error(f"Audio conversion failed: {e}")
            return jsonify({"error": f"Audio conversion failed: {e}"}), 500

    # 6) Compute duration
    try:
        from pydub import AudioSegment
        audio_segment = await run_blocking_io(AudioSegment.from_file, final_audio_path)
        duration_ms = len(audio_segment)
        call_duration = int(duration_ms / 1000)
    except Exception as e:
        app.logger.error(f"Failed to calculate audio duration: {e}")
        return jsonify({"error": "Could not calculate audio duration"}), 500

    # 7) Persist initial record without transcription/conflict
    await run_blocking_io(
        db_service.add_call_record,
        employee_id,
        call_timestamp_str,
        call_duration,
        None,
        final_audio_path,
        None
    )

    # 8) Enqueue for background processing
    audio_queue.put(final_audio_path)

    # 9) Return result
    return jsonify({
        "message": "Call record added successfully; transcription pending.",
        "audio_file_path": final_audio_path,
        "call_duration_seconds": call_duration
    }), 201



@app.route('/companies/<int:company_id>/call_records', methods=['GET'])
@check_company_admin(company_id_arg_name='company_id')
async def api_get_call_records(company_id: int):
    start_time_str = request.args.get('start_time')
    end_time_str = request.args.get('end_time')
    employee_id_filter_str = request.args.get('employee_id')
    if not start_time_str or not end_time_str:
        return jsonify({"error": "Missing start_time or end_time query parameters"}), 400
    try:
        datetime.fromisoformat(start_time_str.replace("Z", "+00:00"))
        datetime.fromisoformat(end_time_str.replace("Z", "+00:00"))
    except ValueError:
        return jsonify({"error": "Invalid date format. Use ISO 8601 format."}), 400
    employee_id_filter = None
    if employee_id_filter_str:
        try:
            employee_id_filter = int(employee_id_filter_str)
        except ValueError:
            return jsonify({"error": "Invalid employee_id filter. Must be an integer."}), 400
    records = await run_blocking_io(
        db_service.get_call_records,
        company_id, start_time_str, end_time_str, employee_id_filter
    )
    for record in records:
        record['audio_file_path'] = ntpath.basename(record['audio_file_path']);
    return jsonify(records), 200


@app.route('/companies/<int:company_id>/call_records/stats', methods=['GET'])
@check_company_admin(company_id_arg_name='company_id')
async def api_get_call_record_stats(company_id: int):
    start_time_str = request.args.get('start_time')
    end_time_str = request.args.get('end_time')
    employee_id_filter_str = request.args.get('employee_id')
    if not start_time_str or not end_time_str:
        return jsonify({"error": "Missing start_time or end_time query parameters"}), 400
    try:
        datetime.fromisoformat(start_time_str.replace("Z", "+00:00"))
        datetime.fromisoformat(end_time_str.replace("Z", "+00:00"))
    except ValueError:
        return jsonify({"error": "Invalid date format. Use ISO 8601 format."}), 400
    employee_id_filter = None
    if employee_id_filter_str:
        try:
            employee_id_filter = int(employee_id_filter_str)
        except ValueError:
            return jsonify({"error": "Invalid employee_id filter. Must be an integer."}), 400

    records = await run_blocking_io(
        db_service.get_call_records,
        company_id, start_time_str, end_time_str, employee_id_filter
    )
    filters_applied = {
        "company_id": company_id, "start_time": start_time_str,
        "end_time": end_time_str, "employee_id": employee_id_filter
    }
    if not records:
        stats = {"total_calls": 0, "total_duration_seconds": 0, "conflict_percentage": 0.0,
                 "filters_applied": filters_applied}
    else:
        stats = {
            "total_calls": db_service.count_calls(records),
            "total_duration_seconds": db_service.sum_call_durations(records),
            "conflict_percentage": db_service.calculate_conflict_percentage(records),
            "filters_applied": filters_applied
        }
    return jsonify(stats), 200


@app.route('/recordings/<path:filename>', methods=['GET'])
@token_required
@admin_only
async def serve_recording(filename: str):
    if '..' in filename or '/' in filename:
        return jsonify({"error": "Invalid filename."}), 400
    try:
        return await asyncio.to_thread(send_from_directory, RECORDINGS_DIR, filename, as_attachment=False)
    except FileNotFoundError:
        return jsonify({"error": "Recording not found."}), 404


if __name__ == '__main__':
    app.run(debug=os.getenv('FLASK_DEBUG', 'False').lower() == 'true', host='0.0.0.0',
            port=int(os.getenv('PORT', 5000)))
